Instantiating component-classes from html strings

In older versions of JavaScript all classes were accessible through window['className'];
Newer versions of JavaScript (ES6?) stores classes in a global scope but not accessible through any object.

Currently the only two solutions to this problem are:
A: eval(className);
B: window[className] = class;

Option A lets us dynamically instantiate any class whenever we want to, it's drawback however is using eval which has slow performance and is considered unsafe. It being considered unsafe has put pressure on many Servers, their action has most of the time therefore been to forbid it being used at all. This is a strong argument for us not to use eval in our frontend libraries as we would like to support most servers.

Our only other option B, requires us to manually register each and every class in a scoped object in order to access them dynamically with a string later on.
This can be done in 2 ways:
A: Changing the class syntax of components.
B: Calling a function once per component-class.

Option A goes against this framework's goal of being as close to native and simple as possible.

Option B doesn't force the user to change his/her syntax and only adds an extra function-call which can be done from anywhere in our startup code execution, it also gives us a centralized location for registering all class-names.
(This is the way-to-go for many modern frontend libraries).
Manually doing this is fairly easy but we should be able to automate part of this process by having a backend-process process our frontend files and accumulate a list of classnames.
Automating it gives us some restrictions: All component-classes must be stored in one or more pre-determined folder-locations. Storing all component-classes in the same location helps keep the project-files organized and is therefore not considered a big drawback.


Letting components be part of the DOM
In our frontend framework we accompany each of our components with some HTML, this HTML should have a clear connection with it's component in order to share data back and fourth.
This gives us different options of how to express and store the html.

Some of the ways of storing this would be:
A: Storing the component's native DOM-tree in a variable of the component, modifying it directly from the component's class.
B: Storing it in a multiline string-variable of the class.
C: Storing it in a separate file and attaching it to the correct class in a similar way to registering component-names.

These different options present their own pros (+) and cons (-)
A:
  + Very easy to implement.
  - Very bothersome for the user to manage and would require him/her to have advanced knowledge of DOM-manipulation in JavaScript.

B:
  + Easy to find a component's belonging HTML-code since it's located in the same file as the class.
  + Native HTML doesn't force the user to go out of their way learning how to write it.
  - Large pieces of HTML stored in the same file as the JavaScript will bother the user with scrolling and searching-behaviour even when they're not modifying the HTML.
  - No syntax-highlighting of HTML.

C:
  + Large pieces of HTML won't disturb the user when working on the JavaScript.
  + Native HTML.
  - Small pieces of HTML (the most common type) will make it bothersome for the user because they have to "open and switch between several different files" when working on a single component.

For our simple framework I have chosen option B for storing HTML-code.

For the different ways of expressing the HTML in our components
A: Native HTML with no javascript involved.
B: Native HTML with template literals inserting values from JavaScript.
C: Native HTML with additions such as symbols for inserting values from JavaScript.
D: Creating a JavaScript API acting as a facade for DOM-Nodes with the help of objects and functions.
E: HTML is based on XML, but we are not forced to do the same, we could express our DOM-tree in other languages such as JSON, Visual Nodes, LaTeX or even sheet music.
F: Not having a DOM-tree represented as a tree of nodes at all but instead incorporating the DOM as part of the JavaScript coding environment.

A:
  + All our users already know HTML well.
  + Practically no development time needed.
  - Modifying the DOM with values from our components gets very bothersome due to amount of code needed and it forces the user to know a JavaScript API for DOM-manipulation.

B:
  + All our users already know HTML and template literals.
  + Very low development time compared to all other options involving javascript.
  - Having to write ${} around every variable and executable piece of code in our templates may be considered bothersome boilerplate code.

C:
  + All our users already know HTML well and our additions won't affect that part.
  + We can choose for this syntax to be very easy to use.
  + With good syntax this won't force the user to learn many new things and if our additions are very close to native that would make it even easier.
  - With bad syntax this will make our framework very hard to learn and possibly bothersome to use.
  - It requires increased development time as we have to parse what parts of the strings are executable code.

D:
  + The performance cost of this in comparison to regular DOM-nodes is tiny in both CPU & memory usage.
  + The structure would look somewhat similar to native HTML even though nodes would be created using a function and later be represented as objects.
  + The process of modifying nodes becomes easier as it would closer align to regular JavaScript coding and we could integrate already existing classes such as Proxy into our nodes.
  - It would force the user to learn a completely new syntax.
  - As JavaScript is very dynamic and the DOM-tree is not this could cause problems as we would lack the static typing validation that's appreciated when writing markup.

E:  Coming up with a good replacement for HTML is outside the scope of this work.
  + This has unlimited potential and might make the act of writing HTML a long-forgotten thing.
  - Users would have to learn a new language.

F:  Coming up with a good replacement for having a DOM-Tree structure is outside the scope of this work.
  + This has unlimited potential and might make the act of writing HTML a long-forgotten thing.
  + Chances are high that having a tree-like structure for the DOM is not the best way of managing a component-based website.
  - Users would have to learn and adjust to a new way of thinking about how to interact with the DOM.


For our simple framework I have chosen option B for storing HTML-code and option B for managing the cooperation between JavaScript and HTML. At first I went for option C for template-javascript but due to the low development time at hand had to switch over to option B.

For Option C the syntax I chose for binding data to the HTML is simply writing "this.variableName" since it's the most natural way for a modern JS programmer to express themselves with variables. The negative impact of not being able to write "this.something" where the intention is NOT to insert the variable named "something" is non-existant since grammar forces you to put a space between dots and new sentences. For applications where the text is not natural language, grammar doesn't apply, I considered that a minor issue as the chances of the user wanting to write "this." before the next word is practically non-existant as well.
Lastly, if the "this.variable" isn't found in the component's class, undefined will be printed in it's place as this will better notify the developer of possible bugs in his/her code.
The development code needed for making "this.variable" accessible in html-attributes and TextNodes wasn't too big but it quickly became complex when I tried to incorporate the parsing of function calls, the iterator symbol, conditional operators and nested objects. With more development time I would continue using Option C as it gives the best benefits contra development-time.